{
  "version": 3,
  "sources": ["browser-route-module:routes/_auth.login.tsx?browser", "../../../app/routes/_auth.login.tsx"],
  "sourcesContent": ["export { default, meta } from \"./routes/_auth.login.tsx\";", "import {\n    ActionFunction,\n    HeadersFunction,\n    json,\n    LoaderArgs,\n    LoaderFunction,\n    redirect,\n    V2_MetaFunction,\n} from '@remix-run/node'\nimport { createValidator } from '~/utils/validation/validation.boilerplate'\nimport {\n    loginUser,\n    createToken,\n    checkToken,\n    getSession,\n    commitSession,\n} from '~/actions/auth.actions'\n\nimport { ValidatedForm } from 'remix-validated-form'\nimport { Link, useActionData, useNavigation } from '@remix-run/react'\nimport { Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { TextField } from '~/components/form'\n\nconst validator = createValidator(new Set(['email', 'password']))\n\nexport const meta: V2_MetaFunction = () => [\n    {\n        title: 'Entrar - Mei Invoices',\n    },\n]\n\nexport const loader: LoaderFunction = async ({ request }: LoaderArgs) => {\n    const { decodedToken } = await checkToken(request.headers.get('Cookie'))\n    if (decodedToken) throw redirect('/')\n    return null\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n    const { session, decodedToken } = await checkToken(\n        request.headers.get('Cookie')\n    )\n    if (decodedToken) redirect('/dashboard')\n    const formData = await request.formData()\n    const validate = await validator.validate(formData)\n    if (!validate.data)\n        return json(\n            { message: 'Verifique seus campos.', logged: false },\n            { status: 406 }\n        )\n    try {\n        const { email } = await loginUser(\n            validate.data as { email: string; password: string }\n        )\n        const token = await createToken(email)\n        session.set('__auth', token)\n    } catch (e) {\n        return json(\n            { message: 'Login inv\u00E1lido.', logged: false },\n            { status: 401 }\n        )\n    }\n    throw redirect('/', {\n        headers: {\n            'Set-Cookie': await commitSession(session),\n        },\n    })\n}\n\nexport default function Login() {\n    const action = useActionData()\n    const navigation = useNavigation()\n\n    return (\n        <ValidatedForm\n            validator={validator}\n            className=\"auth__form\"\n            method=\"POST\"\n        >\n            {action?.logged == false ? (\n                <p className=\"auth__error\">{action?.message}</p>\n            ) : (\n                <></>\n            )}\n            <TextField\n                variant=\"outlined\"\n                type=\"email\"\n                label=\"E-mail\"\n                name=\"email\"\n                placeholder=\"email@example.com\"\n                disabled={navigation.state == 'submitting'}\n            ></TextField>\n            <TextField\n                variant=\"outlined\"\n                type=\"password\"\n                label=\"Senha\"\n                name=\"password\"\n                disabled={navigation.state == 'submitting'}\n            ></TextField>\n            <FormControlLabel\n                control={<Checkbox defaultChecked />}\n                label=\"Manter autenticado\"\n                disabled={navigation.state == 'submitting'}\n            />\n            <Button\n                variant=\"contained\"\n                disabled={navigation.state == 'submitting'}\n                type=\"submit\"\n            >\n                Entrar\n            </Button>\n            <Link to=\"/register\">Cadastre-se</Link>\n        </ValidatedForm>\n    )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AA4DgB;AAxDhB,IAAM,YAAY,gBAAgB,oBAAI,IAAI,CAAC,SAAS,UAAU,CAAC,CAAC;AAEzD,IAAM,OAAwB,MAAM;AAAA,EACvC;AAAA,IACI,OAAO;AAAA,EACX;AACJ;AAuCe,SAAR,QAAyB;AAC5B,QAAM,SAAS,cAAc;AAC7B,QAAM,aAAa,cAAc;AAEjC,SACI;AAAA,IAAC;AAAA;AAAA,MACG;AAAA,MACA,WAAU;AAAA,MACV,QAAO;AAAA,MAEN;AAAA,0CAAQ,WAAU,QACf,mDAAC,OAAE,WAAU,eAAe,2CAAQ,WAApC;AAAA;AAAA;AAAA;AAAA,eAA4C,IAE5C;AAAA;AAAA;AAAA;AAAA,eAAE;AAAA,QAEN;AAAA,UAAC;AAAA;AAAA,YACG,SAAQ;AAAA,YACR,MAAK;AAAA,YACL,OAAM;AAAA,YACN,MAAK;AAAA,YACL,aAAY;AAAA,YACZ,UAAU,WAAW,SAAS;AAAA;AAAA,UANlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOC;AAAA,QACD;AAAA,UAAC;AAAA;AAAA,YACG,SAAQ;AAAA,YACR,MAAK;AAAA,YACL,OAAM;AAAA,YACN,MAAK;AAAA,YACL,UAAU,WAAW,SAAS;AAAA;AAAA,UALlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMC;AAAA,QACD;AAAA,UAAC;AAAA;AAAA,YACG,SAAS,mDAAC,oBAAS,gBAAc,QAAxB;AAAA;AAAA;AAAA;AAAA,mBAAyB;AAAA,YAClC,OAAM;AAAA,YACN,UAAU,WAAW,SAAS;AAAA;AAAA,UAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIA;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACG,SAAQ;AAAA,YACR,UAAU,WAAW,SAAS;AAAA,YAC9B,MAAK;AAAA,YACR;AAAA;AAAA,UAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA;AAAA,QACA,mDAAC,QAAK,IAAG,aAAY,2BAArB;AAAA;AAAA;AAAA;AAAA,eAAgC;AAAA;AAAA;AAAA,IArCpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCA;AAER;",
  "names": []
}
